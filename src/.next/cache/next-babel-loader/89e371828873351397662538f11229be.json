{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport config from '../../config';\nimport Link from 'next/link';\nimport useAxios from 'axios-hooks';\nimport ProductRow from '../../components/product-row';\n\nvar ShopList = function ShopList() {\n  var _useAxios = useAxios(config.getProductList),\n      _useAxios2 = _slicedToArray(_useAxios, 2),\n      _useAxios2$ = _useAxios2[0],\n      data = _useAxios2$.data,\n      loading = _useAxios2$.loading,\n      error = _useAxios2$.error,\n      refetch = _useAxios2[1];\n\n  var _useAxios3 = useAxios(config.getShoppingCart),\n      _useAxios4 = _slicedToArray(_useAxios3, 2),\n      _useAxios4$ = _useAxios4[0],\n      cartData = _useAxios4$.data,\n      loadingCart = _useAxios4$.loading,\n      cartError = _useAxios4$.error,\n      refetchCart = _useAxios4[1];\n\n  console.log('cartData', cartData);\n\n  if (loading || loadingCart) {\n    return __jsx(\"p\", null, \"loading\");\n  }\n\n  if (error || cartError) {\n    return __jsx(\"p\", null, \"Our list broke!\");\n  }\n\n  var getItemInCart = function getItemInCart(productId) {\n    return cartData.cartItems.find(function (item) {\n      return item._id === productId;\n    }).quantity;\n  };\n\n  return __jsx(\"div\", null, __jsx(\"h2\", null, \"Product List\"), data.map(function (product) {\n    return __jsx(\"div\", {\n      key: product._id\n    }, __jsx(ProductRow, {\n      product: product,\n      savedQuantity: getItemInCart(product._id)\n    }), __jsx(Link, {\n      href: \"/shop/product/[id]\",\n      as: \"/shop/product/\".concat(product._id)\n    }, __jsx(\"a\", null, \"view product\")));\n  }));\n};\n\nexport default ShopList;","map":{"version":3,"sources":["/Users/vanessa/Documents/Projects/ShoppingCart/shoppingcart/src/pages/shop/index.tsx"],"names":["React","config","Link","useAxios","ProductRow","ShopList","getProductList","data","loading","error","refetch","getShoppingCart","cartData","loadingCart","cartError","refetchCart","console","log","getItemInCart","productId","cartItems","find","item","_id","quantity","map","product"],"mappings":";;AAAA,OAAOA,KAAP,MAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,QAAP,MAAqB,aAArB;AAEA,OAAOC,UAAP,MAAuB,8BAAvB;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;AAAA,kBACuBF,QAAQ,CAACF,MAAM,CAACK,cAAR,CAD/B;AAAA;AAAA;AAAA,MACZC,IADY,eACZA,IADY;AAAA,MACNC,OADM,eACNA,OADM;AAAA,MACGC,KADH,eACGA,KADH;AAAA,MACYC,OADZ;;AAAA,mBAE6DP,QAAQ,CAACF,MAAM,CAACU,eAAR,CAFrE;AAAA;AAAA;AAAA,MAENC,QAFM,eAEZL,IAFY;AAAA,MAEaM,WAFb,eAEIL,OAFJ;AAAA,MAEiCM,SAFjC,eAE0BL,KAF1B;AAAA,MAE8CM,WAF9C;;AAGrBC,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBL,QAAxB;;AAEA,MAAIJ,OAAO,IAAIK,WAAf,EAA4B;AAC1B,WAAO,2BAAP;AACD;;AAED,MAAIJ,KAAK,IAAIK,SAAb,EAAwB;AACtB,WAAO,mCAAP;AACD;;AACD,MAAMI,aAAa,GAAG,SAAhBA,aAAgB,CAACC,SAAD;AAAA,WAAeP,QAAQ,CAACQ,SAAT,CAAmBC,IAAnB,CAAwB,UAACC,IAAD;AAAA,aAAUA,IAAI,CAACC,GAAL,KAAaJ,SAAvB;AAAA,KAAxB,EAA0DK,QAAzE;AAAA,GAAtB;;AAEA,SACE,mBACE,iCADF,EAEGjB,IAAI,CAACkB,GAAL,CAAS,UAACC,OAAD;AAAA,WACR;AAAK,MAAA,GAAG,EAAEA,OAAO,CAACH;AAAlB,OACE,MAAC,UAAD;AAAY,MAAA,OAAO,EAAEG,OAArB;AAA8B,MAAA,aAAa,EAAER,aAAa,CAACQ,OAAO,CAACH,GAAT;AAA1D,MADF,EAEE,MAAC,IAAD;AAAM,MAAA,IAAI,EAAC,oBAAX;AAAgC,MAAA,EAAE,0BAAmBG,OAAO,CAACH,GAA3B;AAAlC,OACE,gCADF,CAFF,CADQ;AAAA,GAAT,CAFH,CADF;AAaD,CA3BD;;AA6BA,eAAelB,QAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport config from '../../config';\nimport Link from 'next/link';\nimport useAxios from 'axios-hooks';\nimport { Product } from '../../interfaces';\nimport ProductRow from '../../components/product-row';\n\nconst ShopList = () => {\n  const [{ data, loading, error }, refetch] = useAxios(config.getProductList);\n  const [{ data: cartData, loading: loadingCart, error: cartError }, refetchCart] = useAxios(config.getShoppingCart);\n  console.log('cartData', cartData);\n\n  if (loading || loadingCart) {\n    return <p>loading</p>;\n  }\n\n  if (error || cartError) {\n    return <p>Our list broke!</p>;\n  }\n  const getItemInCart = (productId) => cartData.cartItems.find((item) => item._id === productId).quantity;\n\n  return (\n    <div>\n      <h2>Product List</h2>\n      {data.map((product: Product) => (\n        <div key={product._id}>\n          <ProductRow product={product} savedQuantity={getItemInCart(product._id)} />\n          <Link href=\"/shop/product/[id]\" as={`/shop/product/${product._id}`}>\n            <a>view product</a>\n          </Link>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default ShopList;\n"]},"metadata":{},"sourceType":"module"}