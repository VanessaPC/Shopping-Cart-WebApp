{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from 'react';\nimport config from '../../config';\nimport useAxios from 'axios-hooks';\nimport { getStockQuantityError, stopReloadOnItemNotAdded, getButtonText } from './helpers';\n\nvar ProductRow = function ProductRow(_ref) {\n  var product = _ref.product,\n      savedQuantity = _ref.savedQuantity,\n      onCartUpdate = _ref.onCartUpdate;\n\n  var _useState = useState(savedQuantity || 1),\n      selectedQuantity = _useState[0],\n      setSelectedQuantity = _useState[1];\n\n  var _useState2 = useState(true),\n      itemAdded = _useState2[0],\n      setItemAdded = _useState2[1];\n\n  var _useAxios = useAxios({\n    url: config.addItem,\n    method: 'POST'\n  }, {\n    manual: true\n  }),\n      _useAxios2 = _slicedToArray(_useAxios, 2),\n      _useAxios2$ = _useAxios2[0],\n      postData = _useAxios2$.data,\n      postLoading = _useAxios2$.loading,\n      postError = _useAxios2$.error,\n      executePost = _useAxios2[1];\n\n  useEffect(function () {\n    getStockQuantityError(postData);\n  }, [postData]);\n\n  var onQuantityUpdate = function onQuantityUpdate(value) {\n    setSelectedQuantity(value);\n    setItemAdded(false);\n  };\n\n  var onItemUpdate = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var updatedItem;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              updatedItem = _objectSpread(_objectSpread({}, product), {}, {\n                quantity: selectedQuantity\n              });\n              _context.next = 3;\n              return executePost({\n                data: updatedItem\n              });\n\n            case 3:\n              setItemAdded(true);\n              onCartUpdate();\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function onItemUpdate() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  stopReloadOnItemNotAdded(itemAdded);\n  return __jsx(\"div\", null, __jsx(\"label\", {\n    id: \"quantity-select\"\n  }, \"Select a quantity:\"), __jsx(\"select\", {\n    name: \"item-quantity\",\n    id: \"quantity-select\",\n    value: selectedQuantity,\n    onChange: function onChange(e) {\n      return onQuantityUpdate(parseInt(e.target.value));\n    }\n  }, _toConsumableArray(Array(product.inStockQuantity)).map(function (u, i) {\n    return __jsx(\"option\", {\n      key: i,\n      value: i + 1\n    }, i + 1);\n  })), __jsx(\"button\", {\n    type: \"submit\",\n    onClick: onItemUpdate\n  }, getButtonText(savedQuantity)));\n};\n\nexport default ProductRow;","map":{"version":3,"sources":["/Users/vanessa/Documents/Projects/ShoppingCart/shoppingcart/src/components/product-row/index.tsx"],"names":["React","useState","useEffect","config","useAxios","getStockQuantityError","stopReloadOnItemNotAdded","getButtonText","ProductRow","product","savedQuantity","onCartUpdate","selectedQuantity","setSelectedQuantity","itemAdded","setItemAdded","url","addItem","method","manual","postData","data","postLoading","loading","postError","error","executePost","onQuantityUpdate","value","onItemUpdate","updatedItem","quantity","e","parseInt","target","Array","inStockQuantity","map","u","i"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,QAAP,MAAqB,aAArB;AAEA,SAASC,qBAAT,EAAgCC,wBAAhC,EAA0DC,aAA1D,QAA+E,WAA/E;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,OAA8C;AAAA,MAA3CC,OAA2C,QAA3CA,OAA2C;AAAA,MAAlCC,aAAkC,QAAlCA,aAAkC;AAAA,MAAnBC,YAAmB,QAAnBA,YAAmB;;AAAA,kBACfV,QAAQ,CAACS,aAAa,IAAI,CAAlB,CADO;AAAA,MACxDE,gBADwD;AAAA,MACtCC,mBADsC;;AAAA,mBAE7BZ,QAAQ,CAAC,IAAD,CAFqB;AAAA,MAExDa,SAFwD;AAAA,MAE7CC,YAF6C;;AAAA,kBAGmBX,QAAQ,CACxF;AACEY,IAAAA,GAAG,EAAEb,MAAM,CAACc,OADd;AAEEC,IAAAA,MAAM,EAAE;AAFV,GADwF,EAKxF;AAAEC,IAAAA,MAAM,EAAE;AAAV,GALwF,CAH3B;AAAA;AAAA;AAAA,MAGhDC,QAHgD,eAGtDC,IAHsD;AAAA,MAG7BC,WAH6B,eAGtCC,OAHsC;AAAA,MAGTC,SAHS,eAGhBC,KAHgB;AAAA,MAGIC,WAHJ;;AAW/DxB,EAAAA,SAAS,CAAC,YAAM;AACdG,IAAAA,qBAAqB,CAACe,QAAD,CAArB;AACD,GAFQ,EAEN,CAACA,QAAD,CAFM,CAAT;;AAIA,MAAMO,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,KAAD,EAAmB;AAC1Cf,IAAAA,mBAAmB,CAACe,KAAD,CAAnB;AACAb,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GAHD;;AAKA,MAAMc,YAAY;AAAA,yEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AACbC,cAAAA,WADa,mCAEdrB,OAFc;AAGjBsB,gBAAAA,QAAQ,EAAEnB;AAHO;AAAA;AAAA,qBAKbc,WAAW,CAAC;AAAEL,gBAAAA,IAAI,EAAES;AAAR,eAAD,CALE;;AAAA;AAMnBf,cAAAA,YAAY,CAAC,IAAD,CAAZ;AACAJ,cAAAA,YAAY;;AAPO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAZkB,YAAY;AAAA;AAAA;AAAA,KAAlB;;AAUAvB,EAAAA,wBAAwB,CAACQ,SAAD,CAAxB;AAEA,SACE,mBACE;AAAO,IAAA,EAAE,EAAC;AAAV,0BADF,EAEE;AACE,IAAA,IAAI,EAAC,eADP;AAEE,IAAA,EAAE,EAAC,iBAFL;AAGE,IAAA,KAAK,EAAEF,gBAHT;AAIE,IAAA,QAAQ,EAAE,kBAACoB,CAAD;AAAA,aAAOL,gBAAgB,CAACM,QAAQ,CAACD,CAAC,CAACE,MAAF,CAASN,KAAV,CAAT,CAAvB;AAAA;AAJZ,KAMG,mBAAIO,KAAK,CAAC1B,OAAO,CAAC2B,eAAT,CAAT,EAAoCC,GAApC,CAAwC,UAACC,CAAD,EAAIC,CAAJ;AAAA,WACvC;AAAQ,MAAA,GAAG,EAAEA,CAAb;AAAgB,MAAA,KAAK,EAAEA,CAAC,GAAG;AAA3B,OACGA,CAAC,GAAG,CADP,CADuC;AAAA,GAAxC,CANH,CAFF,EAcE;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,OAAO,EAAEV;AAA/B,KACGtB,aAAa,CAACG,aAAD,CADhB,CAdF,CADF;AAoBD,CApDD;;AAsDA,eAAeF,UAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport config from '../../config';\nimport useAxios from 'axios-hooks';\nimport Item from '../item';\nimport { getStockQuantityError, stopReloadOnItemNotAdded, getButtonText } from './helpers';\n\nconst ProductRow = ({ product, savedQuantity, onCartUpdate }) => {\n  const [selectedQuantity, setSelectedQuantity] = useState(savedQuantity || 1);\n  const [itemAdded, setItemAdded] = useState(true);\n  const [{ data: postData, loading: postLoading, error: postError }, executePost] = useAxios(\n    {\n      url: config.addItem,\n      method: 'POST',\n    },\n    { manual: true }\n  );\n\n  useEffect(() => {\n    getStockQuantityError(postData);\n  }, [postData]);\n\n  const onQuantityUpdate = (value: number) => {\n    setSelectedQuantity(value);\n    setItemAdded(false);\n  };\n\n  const onItemUpdate = async () => {\n    const updatedItem = {\n      ...product,\n      quantity: selectedQuantity,\n    };\n    await executePost({ data: updatedItem });\n    setItemAdded(true);\n    onCartUpdate();\n  };\n\n  stopReloadOnItemNotAdded(itemAdded);\n\n  return (\n    <div>\n      <label id=\"quantity-select\">Select a quantity:</label>\n      <select\n        name=\"item-quantity\"\n        id=\"quantity-select\"\n        value={selectedQuantity}\n        onChange={(e) => onQuantityUpdate(parseInt(e.target.value))}\n      >\n        {[...Array(product.inStockQuantity)].map((u, i) => (\n          <option key={i} value={i + 1}>\n            {i + 1}\n          </option>\n        ))}\n      </select>\n      <button type=\"submit\" onClick={onItemUpdate}>\n        {getButtonText(savedQuantity)}\n      </button>\n    </div>\n  );\n};\n\nexport default ProductRow;\n"]},"metadata":{},"sourceType":"module"}