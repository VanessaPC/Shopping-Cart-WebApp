{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport config from '../../config';\nimport Link from 'next/link';\nimport useAxios from 'axios-hooks';\nimport Item from '../../components/item';\n\nvar ShopList = function ShopList() {\n  var _useAxios = useAxios(config.getProductList),\n      _useAxios2 = _slicedToArray(_useAxios, 2),\n      _useAxios2$ = _useAxios2[0],\n      data = _useAxios2$.data,\n      loading = _useAxios2$.loading,\n      error = _useAxios2$.error,\n      refetch = _useAxios2[1]; // const [{ data: putData, loading: putLoading, error: putError }, executePut] = useAxios(\n  //   {\n  //     url: config.addItem,\n  //     method: 'POST',\n  //   },\n  //   { manual: true }\n  // );\n\n\n  var _useState = useState(data),\n      cartQuantity = _useState[0],\n      setCartQuantity = _useState[1];\n\n  var updateSelectedQuantity = function updateSelectedQuantity(qtt) {\n    console.log('QTT: ', qtt);\n  };\n\n  var addItemAndQuantity = function addItemAndQuantity(product) {\n    console.log('selected product', product); // setCartQuantity(number);\n  }; // const addItemAndQuantity = (product) => {\n  //   console.log('submitting: ');\n  //   // return executePut({ data: { cartQuantity, updatedAt: new Date().toISOString() } });\n  // };\n\n\n  if (loading) {\n    return __jsx(\"p\", null, \"loading\");\n  }\n\n  if (error) {\n    return __jsx(\"p\", null, \"Our list broke!\");\n  }\n\n  return __jsx(\"div\", null, __jsx(\"h2\", null, \"Product List\"), data.map(function (product) {\n    return __jsx(\"div\", {\n      key: product._id\n    }, __jsx(Item, {\n      product: product\n    }), __jsx(Link, {\n      href: \"/shop/product/[id]\",\n      as: \"/shop/product/\".concat(product._id)\n    }, __jsx(\"a\", null, \"view product\")), __jsx(\"label\", {\n      id: \"quantity-select\"\n    }, \"Select a quantity:\"), __jsx(\"select\", {\n      name: \"item-quantity\",\n      id: \"quantity-select\",\n      onClick: function onClick(e) {\n        return updateSelectedQuantity(e.target.value);\n      }\n    }, _toConsumableArray(Array(product.inStockQuantity)).map(function (u, i) {\n      return __jsx(\"option\", {\n        key: i,\n        value: i\n      }, i);\n    })), __jsx(\"button\", {\n      type: \"submit\",\n      onClick: function onClick(product) {\n        return addItemAndQuantity(product);\n      }\n    }, \"Add\"));\n  }));\n};\n\nexport default ShopList;","map":{"version":3,"sources":["/Users/vanessa/Documents/Projects/ShoppingCart/shoppingcart/src/pages/shop/index.tsx"],"names":["React","useState","config","Link","useAxios","Item","ShopList","getProductList","data","loading","error","refetch","cartQuantity","setCartQuantity","updateSelectedQuantity","qtt","console","log","addItemAndQuantity","product","map","_id","e","target","value","Array","inStockQuantity","u","i"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,OAAOC,IAAP,MAAiB,uBAAjB;;AAGA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;AAAA,kBACuBF,QAAQ,CAACF,MAAM,CAACK,cAAR,CAD/B;AAAA;AAAA;AAAA,MACZC,IADY,eACZA,IADY;AAAA,MACNC,OADM,eACNA,OADM;AAAA,MACGC,KADH,eACGA,KADH;AAAA,MACYC,OADZ,kBAErB;AACA;AACA;AACA;AACA;AACA;AACA;;;AARqB,kBAUmBV,QAAQ,CAACO,IAAD,CAV3B;AAAA,MAUdI,YAVc;AAAA,MAUAC,eAVA;;AAYrB,MAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACC,GAAD,EAAS;AACtCC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,GAArB;AACD,GAFD;;AAGA,MAAMG,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,OAAD,EAAa;AACtCH,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCE,OAAhC,EADsC,CAEtC;AACD,GAHD,CAfqB,CAmBrB;AACA;AACA;AACA;;;AAEA,MAAIV,OAAJ,EAAa;AACX,WAAO,2BAAP;AACD;;AAED,MAAIC,KAAJ,EAAW;AACT,WAAO,mCAAP;AACD;;AAED,SACE,mBACE,iCADF,EAEGF,IAAI,CAACY,GAAL,CAAS,UAACD,OAAD;AAAA,WACR;AAAK,MAAA,GAAG,EAAEA,OAAO,CAACE;AAAlB,OACE,MAAC,IAAD;AAAM,MAAA,OAAO,EAAEF;AAAf,MADF,EAEE,MAAC,IAAD;AAAM,MAAA,IAAI,EAAC,oBAAX;AAAgC,MAAA,EAAE,0BAAmBA,OAAO,CAACE,GAA3B;AAAlC,OACE,gCADF,CAFF,EAKE;AAAO,MAAA,EAAE,EAAC;AAAV,4BALF,EAME;AAAQ,MAAA,IAAI,EAAC,eAAb;AAA6B,MAAA,EAAE,EAAC,iBAAhC;AAAkD,MAAA,OAAO,EAAE,iBAACC,CAAD;AAAA,eAAOR,sBAAsB,CAACQ,CAAC,CAACC,MAAF,CAASC,KAAV,CAA7B;AAAA;AAA3D,OACG,mBAAIC,KAAK,CAACN,OAAO,CAACO,eAAT,CAAT,EAAoCN,GAApC,CAAwC,UAACO,CAAD,EAAIC,CAAJ;AAAA,aACvC;AAAQ,QAAA,GAAG,EAAEA,CAAb;AAAgB,QAAA,KAAK,EAAEA;AAAvB,SACGA,CADH,CADuC;AAAA,KAAxC,CADH,CANF,EAaE;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,OAAO,EAAE,iBAACT,OAAD;AAAA,eAAaD,kBAAkB,CAACC,OAAD,CAA/B;AAAA;AAA/B,aAbF,CADQ;AAAA,GAAT,CAFH,CADF;AAwBD,CAxDD;;AA0DA,eAAeb,QAAf","sourcesContent":["import React, { useState } from 'react';\nimport config from '../../config';\nimport Link from 'next/link';\nimport useAxios from 'axios-hooks';\nimport Item from '../../components/item';\nimport { Product } from '../../interfaces';\n\nconst ShopList = () => {\n  const [{ data, loading, error }, refetch] = useAxios(config.getProductList);\n  // const [{ data: putData, loading: putLoading, error: putError }, executePut] = useAxios(\n  //   {\n  //     url: config.addItem,\n  //     method: 'POST',\n  //   },\n  //   { manual: true }\n  // );\n\n  const [cartQuantity, setCartQuantity] = useState(data);\n\n  const updateSelectedQuantity = (qtt) => {\n    console.log('QTT: ', qtt);\n  };\n  const addItemAndQuantity = (product) => {\n    console.log('selected product', product);\n    // setCartQuantity(number);\n  };\n  // const addItemAndQuantity = (product) => {\n  //   console.log('submitting: ');\n  //   // return executePut({ data: { cartQuantity, updatedAt: new Date().toISOString() } });\n  // };\n\n  if (loading) {\n    return <p>loading</p>;\n  }\n\n  if (error) {\n    return <p>Our list broke!</p>;\n  }\n\n  return (\n    <div>\n      <h2>Product List</h2>\n      {data.map((product: Product) => (\n        <div key={product._id}>\n          <Item product={product} />\n          <Link href=\"/shop/product/[id]\" as={`/shop/product/${product._id}`}>\n            <a>view product</a>\n          </Link>\n          <label id=\"quantity-select\">Select a quantity:</label>\n          <select name=\"item-quantity\" id=\"quantity-select\" onClick={(e) => updateSelectedQuantity(e.target.value)}>\n            {[...Array(product.inStockQuantity)].map((u, i) => (\n              <option key={i} value={i}>\n                {i}\n              </option>\n            ))}\n          </select>\n          <button type=\"submit\" onClick={(product) => addItemAndQuantity(product)}>\n            Add\n          </button>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default ShopList;\n"]},"metadata":{},"sourceType":"module"}