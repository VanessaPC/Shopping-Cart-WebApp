{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport React, { useState } from 'react';\nimport config from '../../config';\nimport useAxios from 'axios-hooks';\nimport Item from '../item';\nimport { getStockQuantityError, stopReloadOnItemNotAdded, getButtonText } from './helpers';\n\nvar ProductRow = function ProductRow(_ref) {\n  var product = _ref.product,\n      savedQuantity = _ref.savedQuantity,\n      onCartUpdate = _ref.onCartUpdate;\n\n  var _useState = useState(savedQuantity),\n      selectedQuantity = _useState[0],\n      setSelectedQuantity = _useState[1];\n\n  var _useState2 = useState(true),\n      itemAdded = _useState2[0],\n      setItemAdded = _useState2[1];\n\n  var _useAxios = useAxios({\n    url: config.addItem,\n    method: 'POST'\n  }, {\n    manual: true\n  }),\n      _useAxios2 = _slicedToArray(_useAxios, 2),\n      _useAxios2$ = _useAxios2[0],\n      postData = _useAxios2$.data,\n      putLoading = _useAxios2$.loading,\n      putError = _useAxios2$.error,\n      executePost = _useAxios2[1];\n\n  var onQuantityUpdate = function onQuantityUpdate(value) {\n    setSelectedQuantity(value);\n    setItemAdded(false);\n  };\n\n  var onItemUpdate = function onItemUpdate() {\n    var postData = _objectSpread(_objectSpread({}, product), {}, {\n      quantity: selectedQuantity\n    });\n\n    executePost({\n      data: postData\n    });\n    setItemAdded(true);\n  };\n\n  stopReloadOnItemNotAdded(itemAdded);\n  getStockQuantityError(postData);\n  return __jsx(\"div\", {\n    key: product._id\n  }, __jsx(Item, {\n    product: product\n  }), __jsx(\"label\", {\n    id: \"quantity-select\"\n  }, \"Select a quantity:\"), __jsx(\"select\", {\n    name: \"item-quantity\",\n    id: \"quantity-select\",\n    value: selectedQuantity,\n    onChange: function onChange(e) {\n      return onQuantityUpdate(parseInt(e.target.value));\n    }\n  }, _toConsumableArray(Array(product.inStockQuantity)).map(function (u, i) {\n    return __jsx(\"option\", {\n      key: i,\n      value: i + 1\n    }, i + 1);\n  })), __jsx(\"button\", {\n    type: \"submit\",\n    onClick: onItemUpdate\n  }, getButtonText(savedQuantity)), __jsx(\"p\", null, \"In stock \", product.quantity));\n};\n\nexport default ProductRow;","map":{"version":3,"sources":["/Users/vanessa/Documents/Projects/ShoppingCart/shoppingcart/src/components/product-row/index.tsx"],"names":["React","useState","config","useAxios","Item","getStockQuantityError","stopReloadOnItemNotAdded","getButtonText","ProductRow","product","savedQuantity","onCartUpdate","selectedQuantity","setSelectedQuantity","itemAdded","setItemAdded","url","addItem","method","manual","postData","data","putLoading","loading","putError","error","executePost","onQuantityUpdate","value","onItemUpdate","quantity","_id","e","parseInt","target","Array","inStockQuantity","map","u","i"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,OAAOC,IAAP,MAAiB,SAAjB;AACA,SAASC,qBAAT,EAAgCC,wBAAhC,EAA0DC,aAA1D,QAA+E,WAA/E;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,OAA8C;AAAA,MAA3CC,OAA2C,QAA3CA,OAA2C;AAAA,MAAlCC,aAAkC,QAAlCA,aAAkC;AAAA,MAAnBC,YAAmB,QAAnBA,YAAmB;;AAAA,kBACfV,QAAQ,CAACS,aAAD,CADO;AAAA,MACxDE,gBADwD;AAAA,MACtCC,mBADsC;;AAAA,mBAE7BZ,QAAQ,CAAC,IAAD,CAFqB;AAAA,MAExDa,SAFwD;AAAA,MAE7CC,YAF6C;;AAAA,kBAGiBZ,QAAQ,CACtF;AACEa,IAAAA,GAAG,EAAEd,MAAM,CAACe,OADd;AAEEC,IAAAA,MAAM,EAAE;AAFV,GADsF,EAKtF;AAAEC,IAAAA,MAAM,EAAE;AAAV,GALsF,CAHzB;AAAA;AAAA;AAAA,MAGhDC,QAHgD,eAGtDC,IAHsD;AAAA,MAG7BC,UAH6B,eAGtCC,OAHsC;AAAA,MAGVC,QAHU,eAGjBC,KAHiB;AAAA,MAGEC,WAHF;;AAW/D,MAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,KAAD,EAAW;AAClCf,IAAAA,mBAAmB,CAACe,KAAD,CAAnB;AACAb,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GAHD;;AAKA,MAAMc,YAAY,GAAG,SAAfA,YAAe,GAAM;AACzB,QAAMT,QAAQ,mCACTX,OADS;AAEZqB,MAAAA,QAAQ,EAAElB;AAFE,MAAd;;AAIAc,IAAAA,WAAW,CAAC;AAAEL,MAAAA,IAAI,EAAED;AAAR,KAAD,CAAX;AACAL,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,GAPD;;AASAT,EAAAA,wBAAwB,CAACQ,SAAD,CAAxB;AACAT,EAAAA,qBAAqB,CAACe,QAAD,CAArB;AAEA,SACE;AAAK,IAAA,GAAG,EAAEX,OAAO,CAACsB;AAAlB,KACE,MAAC,IAAD;AAAM,IAAA,OAAO,EAAEtB;AAAf,IADF,EAEE;AAAO,IAAA,EAAE,EAAC;AAAV,0BAFF,EAGE;AACE,IAAA,IAAI,EAAC,eADP;AAEE,IAAA,EAAE,EAAC,iBAFL;AAGE,IAAA,KAAK,EAAEG,gBAHT;AAIE,IAAA,QAAQ,EAAE,kBAACoB,CAAD;AAAA,aAAOL,gBAAgB,CAACM,QAAQ,CAACD,CAAC,CAACE,MAAF,CAASN,KAAV,CAAT,CAAvB;AAAA;AAJZ,KAMG,mBAAIO,KAAK,CAAC1B,OAAO,CAAC2B,eAAT,CAAT,EAAoCC,GAApC,CAAwC,UAACC,CAAD,EAAIC,CAAJ;AAAA,WACvC;AAAQ,MAAA,GAAG,EAAEA,CAAb;AAAgB,MAAA,KAAK,EAAEA,CAAC,GAAG;AAA3B,OACGA,CAAC,GAAG,CADP,CADuC;AAAA,GAAxC,CANH,CAHF,EAeE;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,OAAO,EAAEV;AAA/B,KACGtB,aAAa,CAACG,aAAD,CADhB,CAfF,EAkBE,8BAAaD,OAAO,CAACqB,QAArB,CAlBF,CADF;AAsBD,CAlDD;;AAoDA,eAAetB,UAAf","sourcesContent":["import React, { useState } from 'react';\nimport config from '../../config';\nimport useAxios from 'axios-hooks';\nimport Item from '../item';\nimport { getStockQuantityError, stopReloadOnItemNotAdded, getButtonText } from './helpers';\n\nconst ProductRow = ({ product, savedQuantity, onCartUpdate }) => {\n  const [selectedQuantity, setSelectedQuantity] = useState(savedQuantity);\n  const [itemAdded, setItemAdded] = useState(true);\n  const [{ data: postData, loading: putLoading, error: putError }, executePost] = useAxios(\n    {\n      url: config.addItem,\n      method: 'POST',\n    },\n    { manual: true }\n  );\n\n  const onQuantityUpdate = (value) => {\n    setSelectedQuantity(value);\n    setItemAdded(false);\n  };\n\n  const onItemUpdate = () => {\n    const postData = {\n      ...product,\n      quantity: selectedQuantity,\n    };\n    executePost({ data: postData });\n    setItemAdded(true);\n  };\n\n  stopReloadOnItemNotAdded(itemAdded);\n  getStockQuantityError(postData);\n\n  return (\n    <div key={product._id}>\n      <Item product={product} />\n      <label id=\"quantity-select\">Select a quantity:</label>\n      <select\n        name=\"item-quantity\"\n        id=\"quantity-select\"\n        value={selectedQuantity}\n        onChange={(e) => onQuantityUpdate(parseInt(e.target.value))}\n      >\n        {[...Array(product.inStockQuantity)].map((u, i) => (\n          <option key={i} value={i + 1}>\n            {i + 1}\n          </option>\n        ))}\n      </select>\n      <button type=\"submit\" onClick={onItemUpdate}>\n        {getButtonText(savedQuantity)}\n      </button>\n      <p>In stock {product.quantity}</p>\n    </div>\n  );\n};\n\nexport default ProductRow;\n"]},"metadata":{},"sourceType":"module"}