{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from 'react';\nimport config from '../../config';\nimport useAxios from 'axios-hooks';\nimport Item from '../item';\nimport { getStockQuantityError, stopReloadOnItemNotAdded, getButtonText } from './helpers';\n\nvar ProductRow = function ProductRow(_ref) {\n  var product = _ref.product,\n      savedQuantity = _ref.savedQuantity,\n      onCartUpdate = _ref.onCartUpdate;\n\n  var _useState = useState(savedQuantity),\n      selectedQuantity = _useState[0],\n      setSelectedQuantity = _useState[1];\n\n  var _useState2 = useState(true),\n      itemAdded = _useState2[0],\n      setItemAdded = _useState2[1];\n\n  var _useAxios = useAxios({\n    url: config.addItem,\n    method: 'POST'\n  }, {\n    manual: true\n  }),\n      _useAxios2 = _slicedToArray(_useAxios, 2),\n      _useAxios2$ = _useAxios2[0],\n      postData = _useAxios2$.data,\n      putLoading = _useAxios2$.loading,\n      putError = _useAxios2$.error,\n      executePost = _useAxios2[1];\n\n  var onQuantityUpdate = function onQuantityUpdate(value) {\n    setSelectedQuantity(value);\n    setItemAdded(false);\n  };\n\n  var onItemUpdate = function onItemUpdate() {\n    var postData = _objectSpread(_objectSpread({}, product), {}, {\n      quantity: selectedQuantity\n    });\n\n    var x = executePost({\n      data: postData\n    });\n    console.log('bleh: ', x);\n    setItemAdded(true);\n    onCartUpdate();\n  };\n\n  stopReloadOnItemNotAdded(itemAdded);\n  getStockQuantityError(postData);\n  return __jsx(\"div\", {\n    key: product._id\n  }, __jsx(Item, {\n    product: product\n  }), __jsx(\"label\", {\n    id: \"quantity-select\"\n  }, \"Select a quantity:\"), __jsx(\"select\", {\n    name: \"item-quantity\",\n    id: \"quantity-select\",\n    value: selectedQuantity,\n    onChange: function onChange(e) {\n      return onQuantityUpdate(parseInt(e.target.value));\n    }\n  }, _toConsumableArray(Array(product.inStockQuantity)).map(function (u, i) {\n    return __jsx(\"option\", {\n      key: i,\n      value: i + 1\n    }, i + 1);\n  })), __jsx(\"button\", {\n    type: \"submit\",\n    onClick: onItemUpdate\n  }, getButtonText(savedQuantity)), __jsx(\"p\", null, \"In stock \", product.quantity));\n};\n\nexport default ProductRow;","map":{"version":3,"sources":["/Users/vanessa/Documents/Projects/ShoppingCart/shoppingcart/src/components/product-row/index.tsx"],"names":["React","useState","config","useAxios","Item","getStockQuantityError","stopReloadOnItemNotAdded","getButtonText","ProductRow","product","savedQuantity","onCartUpdate","selectedQuantity","setSelectedQuantity","itemAdded","setItemAdded","url","addItem","method","manual","postData","data","putLoading","loading","putError","error","executePost","onQuantityUpdate","value","onItemUpdate","quantity","x","console","log","_id","e","parseInt","target","Array","inStockQuantity","map","u","i"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,OAAOC,IAAP,MAAiB,SAAjB;AACA,SAASC,qBAAT,EAAgCC,wBAAhC,EAA0DC,aAA1D,QAA+E,WAA/E;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,OAA8C;AAAA,MAA3CC,OAA2C,QAA3CA,OAA2C;AAAA,MAAlCC,aAAkC,QAAlCA,aAAkC;AAAA,MAAnBC,YAAmB,QAAnBA,YAAmB;;AAAA,kBACfV,QAAQ,CAACS,aAAD,CADO;AAAA,MACxDE,gBADwD;AAAA,MACtCC,mBADsC;;AAAA,mBAE7BZ,QAAQ,CAAC,IAAD,CAFqB;AAAA,MAExDa,SAFwD;AAAA,MAE7CC,YAF6C;;AAAA,kBAGiBZ,QAAQ,CACtF;AACEa,IAAAA,GAAG,EAAEd,MAAM,CAACe,OADd;AAEEC,IAAAA,MAAM,EAAE;AAFV,GADsF,EAKtF;AAAEC,IAAAA,MAAM,EAAE;AAAV,GALsF,CAHzB;AAAA;AAAA;AAAA,MAGhDC,QAHgD,eAGtDC,IAHsD;AAAA,MAG7BC,UAH6B,eAGtCC,OAHsC;AAAA,MAGVC,QAHU,eAGjBC,KAHiB;AAAA,MAGEC,WAHF;;AAW/D,MAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,KAAD,EAAW;AAClCf,IAAAA,mBAAmB,CAACe,KAAD,CAAnB;AACAb,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GAHD;;AAKA,MAAMc,YAAY,GAAG,SAAfA,YAAe,GAAM;AACzB,QAAMT,QAAQ,mCACTX,OADS;AAEZqB,MAAAA,QAAQ,EAAElB;AAFE,MAAd;;AAIA,QAAImB,CAAC,GAAGL,WAAW,CAAC;AAAEL,MAAAA,IAAI,EAAED;AAAR,KAAD,CAAnB;AACAY,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBF,CAAtB;AACAhB,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAJ,IAAAA,YAAY;AACb,GATD;;AAWAL,EAAAA,wBAAwB,CAACQ,SAAD,CAAxB;AACAT,EAAAA,qBAAqB,CAACe,QAAD,CAArB;AAEA,SACE;AAAK,IAAA,GAAG,EAAEX,OAAO,CAACyB;AAAlB,KACE,MAAC,IAAD;AAAM,IAAA,OAAO,EAAEzB;AAAf,IADF,EAEE;AAAO,IAAA,EAAE,EAAC;AAAV,0BAFF,EAGE;AACE,IAAA,IAAI,EAAC,eADP;AAEE,IAAA,EAAE,EAAC,iBAFL;AAGE,IAAA,KAAK,EAAEG,gBAHT;AAIE,IAAA,QAAQ,EAAE,kBAACuB,CAAD;AAAA,aAAOR,gBAAgB,CAACS,QAAQ,CAACD,CAAC,CAACE,MAAF,CAAST,KAAV,CAAT,CAAvB;AAAA;AAJZ,KAMG,mBAAIU,KAAK,CAAC7B,OAAO,CAAC8B,eAAT,CAAT,EAAoCC,GAApC,CAAwC,UAACC,CAAD,EAAIC,CAAJ;AAAA,WACvC;AAAQ,MAAA,GAAG,EAAEA,CAAb;AAAgB,MAAA,KAAK,EAAEA,CAAC,GAAG;AAA3B,OACGA,CAAC,GAAG,CADP,CADuC;AAAA,GAAxC,CANH,CAHF,EAeE;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,OAAO,EAAEb;AAA/B,KACGtB,aAAa,CAACG,aAAD,CADhB,CAfF,EAkBE,8BAAaD,OAAO,CAACqB,QAArB,CAlBF,CADF;AAsBD,CApDD;;AAsDA,eAAetB,UAAf","sourcesContent":["import React, { useState } from 'react';\nimport config from '../../config';\nimport useAxios from 'axios-hooks';\nimport Item from '../item';\nimport { getStockQuantityError, stopReloadOnItemNotAdded, getButtonText } from './helpers';\n\nconst ProductRow = ({ product, savedQuantity, onCartUpdate }) => {\n  const [selectedQuantity, setSelectedQuantity] = useState(savedQuantity);\n  const [itemAdded, setItemAdded] = useState(true);\n  const [{ data: postData, loading: putLoading, error: putError }, executePost] = useAxios(\n    {\n      url: config.addItem,\n      method: 'POST',\n    },\n    { manual: true }\n  );\n\n  const onQuantityUpdate = (value) => {\n    setSelectedQuantity(value);\n    setItemAdded(false);\n  };\n\n  const onItemUpdate = () => {\n    const postData = {\n      ...product,\n      quantity: selectedQuantity,\n    };\n    let x = executePost({ data: postData });\n    console.log('bleh: ', x);\n    setItemAdded(true);\n    onCartUpdate();\n  };\n\n  stopReloadOnItemNotAdded(itemAdded);\n  getStockQuantityError(postData);\n\n  return (\n    <div key={product._id}>\n      <Item product={product} />\n      <label id=\"quantity-select\">Select a quantity:</label>\n      <select\n        name=\"item-quantity\"\n        id=\"quantity-select\"\n        value={selectedQuantity}\n        onChange={(e) => onQuantityUpdate(parseInt(e.target.value))}\n      >\n        {[...Array(product.inStockQuantity)].map((u, i) => (\n          <option key={i} value={i + 1}>\n            {i + 1}\n          </option>\n        ))}\n      </select>\n      <button type=\"submit\" onClick={onItemUpdate}>\n        {getButtonText(savedQuantity)}\n      </button>\n      <p>In stock {product.quantity}</p>\n    </div>\n  );\n};\n\nexport default ProductRow;\n"]},"metadata":{},"sourceType":"module"}