{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport React, { useState } from 'react';\nimport config from '../../config';\nimport useAxios from 'axios-hooks'; // import Item from '../../components/item';\n\nimport ProductRow from '../../components/product-row';\n\nvar ShopList = function ShopList() {\n  var _useAxios = useAxios(config.getProductList),\n      _useAxios2 = _slicedToArray(_useAxios, 2),\n      _useAxios2$ = _useAxios2[0],\n      data = _useAxios2$.data,\n      loading = _useAxios2$.loading,\n      error = _useAxios2$.error,\n      refetch = _useAxios2[1]; // create object with prices and ids\n\n\n  var _useState = useState({}),\n      cartItems = _useState[0],\n      setCartItems = _useState[1];\n\n  var onFormSubmit = function onFormSubmit() {\n    onSubmit(formData);\n    return false;\n  };\n\n  var setFormDataValue = function setFormDataValue(fieldKey) {\n    return function (value) {\n      var data = _objectSpread({}, formData);\n\n      data[fieldKey] = value;\n      setFormData(data);\n    };\n  };\n\n  var isFormFilled = checkFormDataFields(formData); // const [{ data: putData, loading: putLoading, error: putError }, executePut] = useAxios(\n  //   {\n  //     url: config.addItem,\n  //     method: 'POST',\n  //   },\n  //   { manual: true }\n  // );\n\n  var _useState2 = useState(data),\n      updateCart = _useState2[0],\n      setUpdateCart = _useState2[1];\n\n  var _useState3 = useState('1'),\n      itemQuantity = _useState3[0],\n      setItemQuantity = _useState3[1];\n\n  var addItemAndQuantity = function addItemAndQuantity(product) {\n    console.log('selected product', product);\n    console.log('cart: ', updateCart); // setUpdateCart({ product });\n  }; // const addItemAndQuantity = (product) => {\n  //   console.log('submitting: ');\n  //   // return executePut({ data: { cartQuantity, updatedAt: new Date().toISOString() } });\n  // };\n  // <UserDropdown\n  //           title={translate('form.field.occupation.title')}\n  //           placeholder={translate('components.select.minimalist_placeholder')}\n  //           fieldValue={formData[FORM_FIELD_DATA.OCCUPATION]}\n  //           onFormDataChange={setFormDataValue(FORM_FIELD_DATA.OCCUPATION)}\n  //           keys={USER_OCCUPATION}\n  //         />\n\n\n  if (loading) {\n    return __jsx(\"p\", null, \"loading\");\n  }\n\n  if (error) {\n    return __jsx(\"p\", null, \"Our list broke!\");\n  }\n\n  return __jsx(\"div\", null, __jsx(\"h2\", null, \"Product List\"), data.map(function (product) {\n    return __jsx(ProductRow, {\n      key: product._id,\n      product: product,\n      onCardItemChange: setUpdateCart()\n    });\n  }));\n};\n\nexport default ShopList;","map":{"version":3,"sources":["/Users/vanessa/Documents/Projects/ShoppingCart/shoppingcart/src/pages/shop/index.tsx"],"names":["React","useState","config","useAxios","ProductRow","ShopList","getProductList","data","loading","error","refetch","cartItems","setCartItems","onFormSubmit","onSubmit","formData","setFormDataValue","fieldKey","value","setFormData","isFormFilled","checkFormDataFields","updateCart","setUpdateCart","itemQuantity","setItemQuantity","addItemAndQuantity","product","console","log","map","_id"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,cAAnB;AAEA,OAAOC,QAAP,MAAqB,aAArB,C,CACA;;AAEA,OAAOC,UAAP,MAAuB,8BAAvB;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;AAAA,kBACuBF,QAAQ,CAACD,MAAM,CAACI,cAAR,CAD/B;AAAA;AAAA;AAAA,MACZC,IADY,eACZA,IADY;AAAA,MACNC,OADM,eACNA,OADM;AAAA,MACGC,KADH,eACGA,KADH;AAAA,MACYC,OADZ,kBAGrB;;;AAHqB,kBAIaT,QAAQ,CAAC,EAAD,CAJrB;AAAA,MAIdU,SAJc;AAAA,MAIHC,YAJG;;AAMrB,MAAMC,YAAY,GAAG,SAAfA,YAAe,GAAM;AACzBC,IAAAA,QAAQ,CAACC,QAAD,CAAR;AACA,WAAO,KAAP;AACD,GAHD;;AAIA,MAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,QAAD;AAAA,WAAc,UAACC,KAAD,EAAW;AAChD,UAAIX,IAAI,qBAAQQ,QAAR,CAAR;;AACAR,MAAAA,IAAI,CAACU,QAAD,CAAJ,GAAiBC,KAAjB;AACAC,MAAAA,WAAW,CAACZ,IAAD,CAAX;AACD,KAJwB;AAAA,GAAzB;;AAKA,MAAMa,YAAY,GAAGC,mBAAmB,CAACN,QAAD,CAAxC,CAfqB,CAiBrB;AACA;AACA;AACA;AACA;AACA;AACA;;AAvBqB,mBAyBed,QAAQ,CAACM,IAAD,CAzBvB;AAAA,MAyBde,UAzBc;AAAA,MAyBFC,aAzBE;;AAAA,mBA0BmBtB,QAAQ,CAAC,GAAD,CA1B3B;AAAA,MA0BduB,YA1Bc;AAAA,MA0BAC,eA1BA;;AA4BrB,MAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,OAAD,EAAa;AACtCC,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCF,OAAhC;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBP,UAAtB,EAFsC,CAGtC;AACD,GAJD,CA5BqB,CAiCrB;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAId,OAAJ,EAAa;AACX,WAAO,2BAAP;AACD;;AAED,MAAIC,KAAJ,EAAW;AACT,WAAO,mCAAP;AACD;;AAED,SACE,mBACE,iCADF,EAEGF,IAAI,CAACuB,GAAL,CAAS,UAACH,OAAD;AAAA,WACR,MAAC,UAAD;AAAY,MAAA,GAAG,EAAEA,OAAO,CAACI,GAAzB;AAA8B,MAAA,OAAO,EAAEJ,OAAvC;AAAgD,MAAA,gBAAgB,EAAEJ,aAAa;AAA/E,MADQ;AAAA,GAAT,CAFH,CADF;AAQD,CA7DD;;AA+DA,eAAelB,QAAf","sourcesContent":["import React, { useState } from 'react';\nimport config from '../../config';\nimport Link from 'next/link';\nimport useAxios from 'axios-hooks';\n// import Item from '../../components/item';\nimport { Product } from '../../interfaces';\nimport ProductRow from '../../components/product-row';\n\nconst ShopList = () => {\n  const [{ data, loading, error }, refetch] = useAxios(config.getProductList);\n\n  // create object with prices and ids\n  const [cartItems, setCartItems] = useState({});\n\n  const onFormSubmit = () => {\n    onSubmit(formData);\n    return false;\n  };\n  const setFormDataValue = (fieldKey) => (value) => {\n    let data = { ...formData };\n    data[fieldKey] = value;\n    setFormData(data);\n  };\n  const isFormFilled = checkFormDataFields(formData);\n\n  // const [{ data: putData, loading: putLoading, error: putError }, executePut] = useAxios(\n  //   {\n  //     url: config.addItem,\n  //     method: 'POST',\n  //   },\n  //   { manual: true }\n  // );\n\n  const [updateCart, setUpdateCart] = useState(data);\n  const [itemQuantity, setItemQuantity] = useState('1');\n\n  const addItemAndQuantity = (product) => {\n    console.log('selected product', product);\n    console.log('cart: ', updateCart);\n    // setUpdateCart({ product });\n  };\n  // const addItemAndQuantity = (product) => {\n  //   console.log('submitting: ');\n  //   // return executePut({ data: { cartQuantity, updatedAt: new Date().toISOString() } });\n  // };\n\n  // <UserDropdown\n  //           title={translate('form.field.occupation.title')}\n  //           placeholder={translate('components.select.minimalist_placeholder')}\n  //           fieldValue={formData[FORM_FIELD_DATA.OCCUPATION]}\n  //           onFormDataChange={setFormDataValue(FORM_FIELD_DATA.OCCUPATION)}\n  //           keys={USER_OCCUPATION}\n  //         />\n  if (loading) {\n    return <p>loading</p>;\n  }\n\n  if (error) {\n    return <p>Our list broke!</p>;\n  }\n\n  return (\n    <div>\n      <h2>Product List</h2>\n      {data.map((product: Product) => (\n        <ProductRow key={product._id} product={product} onCardItemChange={setUpdateCart()} />\n      ))}\n    </div>\n  );\n};\n\nexport default ShopList;\n"]},"metadata":{},"sourceType":"module"}